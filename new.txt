Our objective is to implement three FHR instances while minimizing resource utilization. To accomplish this, we have developed a Docker file that combines a Flink job with a Python module responsible for processing FHR 1. Since FHR 1 requires processing in most cases, we have created separate Docker files for the other two Python modules responsible for FHR 2 and FHR 3. The Flink job plays a crucial role in dividing the input stream into three separate streams. One of these streams is processed by a Python module deployed within the Flink job, while the other two streams are sent to an external Python module for additional processing. This architecture necessitates a total of three pods in Kubernetes: two to host the Python modules and one with Python and Flink, enabling them to handle the three separate Flask APIs.
