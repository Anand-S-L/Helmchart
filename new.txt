import org.apache.flink.api.common.functions.ReduceFunction;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;

public class EarlierAggregationExample {

    public static void main(String[] args) throws Exception {
        // Set up the execution environment
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        // Create a data stream
        DataStream<Integer> dataStream = env.fromElements(1, 2, 3, 4, 5);

        // Apply earlier aggregation
        DataStream<Integer> aggregatedStream = dataStream
                .keyBy(value -> "key") // Group by a constant key
                .reduce(new SumReduceFunction());

        // Print the results
        aggregatedStream.print();

        // Execute the Flink job
        env.execute("Earlier Aggregation Example");
    }

    // Custom ReduceFunction to calculate the sum
    public static class SumReduceFunction implements ReduceFunction<Integer> {
        @Override
        public Integer reduce(Integer value1, Integer value2) {
            return value1 + value2;
        }
    }
}
