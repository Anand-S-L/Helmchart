import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.connectors.kafka.KafkaSource;
import org.apache.flink.streaming.connectors.kafka.internals.KafkaTopicPartition;
import org.apache.flink.streaming.util.serialization.SimpleStringSchema;
import org.apache.flink.streaming.connectors.kafka.internals.OffsetsInitializer;

import java.util.Properties;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class KafkaSourceBuilder {

    private String bootstrapServers;
    private String topic;
    private String groupId;

    public KafkaSourceBuilder(String bootstrapServers, String topic, String groupId) {
        this.bootstrapServers = bootstrapServers;
        this.topic = topic;
        this.groupId = groupId;
    }

    public KafkaSource<String> build() {
        Properties properties = new Properties();
        properties.setProperty("bootstrap.servers", bootstrapServers);
        properties.setProperty("group.id", groupId);

        KafkaSource<String> kafkaSource = KafkaSource.<String>builder()
                .setBootstrapServers(bootstrapServers)
                .setGroupId(groupId)
                .setTopics(topic)
                .setStartingOffsets(OffsetsInitializer.latest())
                .setValueOnlyDeserializer(new SimpleStringSchema())
                .build();

        return kafkaSource;
    }

    public static void main(String[] args) throws Exception {
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        KafkaSourceBuilder builder = new KafkaSourceBuilder("172.22.223.112:9092", "input-topic", "my-group");
        KafkaSource<String> source = builder.build();

        env.addSource(source).print();

        env.execute("KafkaSourceExample");
    }
}
